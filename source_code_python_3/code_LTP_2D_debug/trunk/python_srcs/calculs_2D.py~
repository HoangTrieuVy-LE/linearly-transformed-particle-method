#  !/usr/bin/env python
# - * - codin: utf-8 -*-
# derniere modif le 09-10-15 par Frederique
from __future__ import division
import numpy  #as np
from scipy import *  #as sp

import config

#~ from shapefunction2D import *
#~ import shapefunction2D

import barenblatt_fcts

from _calculsfor_f90 import  calculsfor_ini_modf90
from _calculsfor_f90 import  calculsfor_rec_modf90
from _calculsfor_f90 import  calculsfor_var_modf90

def compute_solution(Xg,Yg, t) :
    mx = size(Xg)
    my = size(Yg)
    sol = numpy.zeros((mx,my))    
    for i in range(mx) :
        for j in range(my) :
            if config.name_solution == 'barenblatt' :
                sol[i,j] = barenblatt_fcts.barenblatt(Xg[i],Yg[j],t)            
    return sol


def diffusion_field_barenblatt(X, N , M , D,m_barenblatt,hx_remap,hy_remap):
    diffusion_barenblatt_f2py  = calculsfor_rec_modf90.diffusion_field_barenblatt(X, M , D, m_barenblatt, hx_remap, hy_remap, N)
    return diffusion_barenblatt_f2py

def error(analytic_sol, approx_sol, error_type='L_infinity'): 
    size=analytic_sol.shape[0] * analytic_sol.shape[1]
    vect_analytic_sol = analytic_sol.reshape(size,1)
    vect_approx_sol = approx_sol.reshape(size,1)
    if (error_type == 'L_infinity') :
        error_sol = max(abs(vect_analytic_sol - vect_approx_sol)) / max(abs(vect_analytic_sol))
    elif (error_type == 'absolute_error') :
        error_sol = max(abs(vect_analytic_sol - vect_approx_sol))			    
    else :
        raise ValueError("incorrect type for error_type = "+str(error_type))
    return error_sol

def error_Lp(Xg, Yg, analytic_sol, approx_sol, norm_Lp_order): 
    Z=abs(approx_sol - analytic_sol)**norm_Lp_order
    N1 = analytic_sol.shape[0] 
    N2 = analytic_sol.shape[1]
    print "Xg.shape = ", Xg.shape
    print "Yg.shape = ", Yg.shape
    print "analytic_sol.shape = ", analytic_sol.shape
    print "approx_sol.shape = ", approx_sol.shape
    print "Z.shape = ", Z.shape
    a1 = min(Xg) 
    b1 = max(Xg) 
    a2 = min(Yg)
    b2 = max(Yg)
    hgx = (b1-a1)/N1;
    hgy = (b2-a2)/N2;
    
    ## this is the 2D trapezoidal integration rule based on the step of grid reconstruction
    Lp_Z_int = hgx*hgy*(sum(Z[:,:]) - 0.5*(sum(Z[1,:]+Z[N1-1,:]) + sum(Z[:,1]+Z[:,N2-1])) + 0.25*(Z[1,1]+Z[1,N2-1]+Z[N1-1,1]+Z[N1-1,N2-1]))
    Lp_Z_int = (Lp_Z_int)**(1./norm_Lp_order)
    
    Lp_analytic_sol = hgx*hgy*(sum(analytic_sol[:,:]) - 0.5*(sum(analytic_sol[1,:]+analytic_sol[N1-1,:]) + sum(analytic_sol[:,1]+analytic_sol[:,N2-1])) + 0.25*(analytic_sol[1,1]+analytic_sol[1,N2-1]+analytic_sol[N1-1,1]+analytic_sol[N1-1,N2-1]))
    Lp_analytic_sol = Lp_analytic_sol**(1./norm_Lp_order)
    error = Lp_Z_int / Lp_analytic_sol
    return error
    
#~ f = @(x,y) sqrt((exp(sin(x.*pi - y.*pi)))+(exp(cos(x.*y.*pi))));
#~ a1 = 0; b1 = 3; N1 = 20;
#~ h1 = (b1-a1)/N1;
#~ a2 = -1; b2 = 4; N2 = 30;
#~ h2 = (b2-a2)/N2;
#~ [X,Y] = meshgrid(a1:h1:b1, a2:h2:b2);
#~ Z = f(X,Y); 
#~ T = h1*h2*(sum(Z(:)) - 0.5*(sum(Z(1,:)+Z(end,:)) + sum(Z(:,1)+Z(:,end))) + 0.25*(Z(1,1)+Z(1,end)+Z(end,1)+Z(end,end)))
#~ 


def MaJ_D_barenblatt(D, X, M, t, dt,hx_remap, hy_remap):
	N = len(X[0,:])
	if N==0:
		print 'plus de particules !!!'
    # parameter 1 in 'update_d_schemes' is the number for euler explicit time scheme	
    #diff_field_jac = calculsfor_rec_modf90.diffusion_field_jacobian_barenblatt(X, M, D, m_barenblatt, hx_remap, hy_remap, N)
	update_d_scheme = 0	
	if config.D_method_scheme == 'euler_implicit' :
		update_d_scheme = 3
		indice_max_norm_Dm1, Norm_inf_Dm1, Df2py  = calculsfor_var_modf90.update_d_schemes_diffusion_barenblatt(X, D, M, t, dt, update_d_scheme, config.m_barenblatt, hx_remap, hy_remap, N)    	
		indice_max_norm_Dm1 = int(indice_max_norm_Dm1 - 1) #so this array makes sense in pythonic world (not sure if useful)
		print indice_max_norm_Dm1, Norm_inf_Dm1, Df2py
	elif config.D_method_scheme  == 'euler_explicit' :
		update_d_scheme = 1
		indice_max_norm_Dm1, Norm_inf_Dm1, Df2py  = calculsfor_var_modf90.update_d_schemes_diffusion_barenblatt(X, D, M, t, dt, update_d_scheme, config.m_barenblatt, hx_remap, hy_remap, N)    	
		indice_max_norm_Dm1 = int(indice_max_norm_Dm1 - 1) #so this array makes sense in pythonic world (not sure if useful)
	elif config.D_method_scheme  == 'RK2' :
		update_d_scheme = 2
		indice_max_norm_Dm1, Norm_inf_Dm1, Df2py  = calculsfor_var_modf90.update_d_schemes_diffusion_barenblatt(X, D, M, t, dt, update_d_scheme, config.m_barenblatt, hx_remap, hy_remap, N)    	
		indice_max_norm_Dm1 = int(indice_max_norm_Dm1 - 1) #so this array makes sense in pythonic world (not sure if useful)
	else :
		raise ValueError('wrong D_method_scheme value given : '+str(D_method_scheme))

	return Df2py, Norm_inf_Dm1, indice_max_norm_Dm1    


def MaJ_D_hybrid_barenblatt(D, X, M, t, dt,hx_remap, hy_remap):
    N = len(X[0,:])
    if N==0:
        print 'plus de particules !!!'
	update_d_scheme = 0
    if config.D_method == "hybrid" :
        print "launch :  update_d_hybrid_diffusion_barenblatt"
        print "epsilon = " , epsilon
        indice_max_norm_Dm1, Norm_inf_Dm1, Df2py  = calculsfor_var_modf90.update_d_hybrid_diffusion_barenblatt(X, D, M, t, dt, m_barenblatt, epsilon, hx_remap, hy_remap, N)
    else :
        raise ValueError('wrong D_method_scheme value given : '+str(config.D_method_scheme))

    return Df2py, Norm_inf_Dm1, indice_max_norm_Dm1   

def MaJ_D_barenblatt_mid_scheme(D, X, X_middle, M, t, dt, hx_remap, hy_remap):
	N = len(X[0,:])
	if N==0:
		print 'plus de particules !!!'    
	update_d_scheme = 0
	if time_scheme == 'middle_point' :		
		D_middle, indice_max_norm_Dm1, Norm_inf_Dm1, D_new = calculsfor_var_modf90.update_d_barenblatt_mid_scheme(X, X_middle, D, M, t, dt,1, m_barenblatt, hx_remap, hy_remap, N)				
		indice_max_norm_Dm1 = int(indice_max_norm_Dm1 - 1) #so this array makes sense in pythonic world (not sure if useful)
	else :
		raise ValueError('wrong time_scheme value given : '+str(time_scheme))	
		
	return D_middle, D_new, Norm_inf_Dm1, indice_max_norm_Dm1    


def MaJ_D_FD_scheme_avec_f2py(X, tab, dt ,hx , hy) :
	Norm_inf_Dm1 = 0.
	N = len(X[0,:])	
	if N==0:
		print 'plus de particules !!!'	
	indice_max_norm_Dm1, Norm_inf_Dm1, Df2py = calculsfor_var_modf90.update_d_finite_differences(X, tab, dt ,hx , hy, N)
	indice_max_norm_Dm1 = int(indice_max_norm_Dm1 - 1) #so this array makes sense in pythonic world (not sure if useful)            
	return Df2py, Norm_inf_Dm1, indice_max_norm_Dm1		

def MaJ_D_FD_scheme(X, D , tab, t, dt ,hx , hy):
	Dfor, Norm_inf_Dm1for, indice_max_norm_Dm1for = MaJ_D_FD_scheme_avec_f2py(X, tab, dt ,hx , hy)
	return Dfor, Norm_inf_Dm1for, indice_max_norm_Dm1for


def MAJ_grille(X,Ix,Iy):
    modif_grille = 0
    xmin = X[0,:].min() 
    if xmin<Ix[0]:
        Ix[0] = xmin
        modif_grille = 1
    xmax = X[0,:].max()
    if xmax>Ix[1]:
        Ix[1] = xmax
        modif_grille = 1        
    ymin = X[1,:].min()
    if ymin<Iy[0]:
        Iy[0] = ymin
        modif_grille = 1
    ymax = X[1,:].max()
    if ymax>Iy[1]:
        Iy[1] = ymax
        modif_grille = 1 
    return  Ix, Iy, modif_grille



# ===== Grille =====
def make_grid_unif(Ix, Iy, m):    
    xmin = Ix[0]
    xmax = Ix[1] #min(X[0,:]) + 3 * epsilon
    ymin = Iy[0]  #min(X[0,:]) - 3 * epsilon
    ymax = Iy[1] #min(X[0,:]) + 3 * epsilon
    dx = abs(xmax - xmin) / (m - 1)
    dy = abs(ymax - ymin) / (m - 1)
    delta = min(dx, dy)
    mx = abs(xmax - xmin) / delta + 1
    my = abs(ymax - ymin) / delta + 1
    Xgrid = numpy.linspace(xmin, xmax, mx)  # numpy.array([xmin + i * delta for i in range(mx)])
    Ygrid = numpy.linspace(ymin, ymax, my)  # numpy.array([ymin + j * delta for j in range(my)])
    return [Xgrid, Ygrid]
    

def move_particles_diffusion_barenblatt(X, N , M , D,m_barenblatt,hx_remap,hy_remap) :    
	if time_scheme == 'euler_explicit' :
		k1 = - diffusion_field_barenblatt(X, N , M , D,m_barenblatt,hx_remap,hy_remap)  
		X[0, :] += dt*k1[0,:]
		X[1, :] += dt*k1[1,:]	
	#~ elif time_scheme == 'RK2' : 
		#~ k1=-diffusion_field_barenblatt(X, N , M , D,m_barenblatt,hx_remap,hy_remap)  		
		#~ k2=-diffusion_field_barenblatt(X+(dt/2.)*k1, N , M , D,m_barenblatt,hx_remap,hy_remap)
		#~ X[0, :] += dt*k2[0,:]
		#~ X[1, :] += dt*k2[1,:]        	
	#~ elif time_scheme == 'RK4' : 
		#~ k1 = - diffusion_field_barenblatt(X, N , M , D,m_barenblatt,hx_remap,hy_remap)  		
		#~ k2 = - diffusion_field_barenblatt(X + (dt/2.)*k1, N , M , D,m_barenblatt,hx_remap,hy_remap)
		#~ k3 = - diffusion_field_barenblatt(X + (dt/2.)*k2, N , M , D,m_barenblatt,hx_remap,hy_remap)
		#~ k4 = - diffusion_field_barenblatt(X + dt*k3, N , M , D,m_barenblatt,hx_remap,hy_remap)
		#~ X[0, :] += (dt/6.) * (k1[0,:] + 2*k2[0,:] + 2*k3[0,:] + k4[0,:])
		#~ X[1, :] += (dt/6.) * (k1[1,:] + 2*k2[1,:] + 2*k3[1,:] + k4[1,:])
	else : 
		raise ValueError('uncorrect time scheme given')
	return X
	

	
	
